metadata:
  title: |
    Software Management Plan
  short title: |
    SMP
  description: |
    Write a Software Managament Plan for your project
  authors:
    - name: Ole Mussmann
      organization: The Netherlands eScience Center
    - name: Sander van Rijn
      organization: The Netherlands eScience Center
    - name: Thijs van Lankveld
      organization: The Netherlands eScience Center
  revision_date: 2025-03-25
  tags:
    - management_plan
    - software
---
features:
  navigation: False
  progress bar: False
---
mandatory: True
code: |
  smp_decision_tree_version = "0.0.5"
  community = False
  reuse = False
  multi_user = False
  smp_version = "0.1.0"
  release_date = today()
---
objects:
  - authors: |
      DAEmailRecipientList.using(
        there_are_any=True,
        there_is_another=False)
---
table: authors.table
rows: authors
columns:
  - Name: |
      row_item.name
  - E-mail: |
      row_item.address
edit:
  - name
  - address
allow reordering: True
---
### Start questionnaire
include:
  - introduction.yml
  - name_purpose.yml
---
### Start switch questions
include:
  - access.yml
  - reuse.yml
  - community.yml
---
### Start content questions
include:
  - attribution.yml
  - versioning.yml
  - license.yml
  - documentation.yml
  - sustainability.yml
  - risks.yml
  - dmp.yml
---
mandatory: True
question: |
  Software Management Plan
attachment code: |
  [user_smp, machine_smp, template_yml]
---
attachment:
  name: Human Readable Software Management Plan for `${ software_name }`
  filename: Software_Management_Plan-${ space_to_underscore(software_name) }-${ release_date.strftime('%y_%m_%d') }
  docx template file: SMP_decision_tree_template_4.docx
  valid formats:
  #  - md
    - docx
  description: For your own administration
  variable name: user_smp
---
### Save all user answers in a dictionary
### The text will be saved in a variable called `user_vars_string`
code: |
  import copy
  import json

  user_vars = copy.deepcopy(all_variables())
  del user_vars["url_args"]
  del user_vars["session_local"]
  del user_vars["user_local"]
  del user_vars["device_local"]

  user_vars_string = json.dumps(user_vars, sort_keys=True, indent=4)
---
attachment:
  name: Machine Readable SMP for `${ software_name }`
  filename: Machine_Readable_SMP_${ space_to_underscore(software_name) }
  valid formats:
    - md
  description: For automated analysis
  variable name: machine_smp
  content: ${ user_vars_string }
---
attachment:
  name: Input file for the NLeSC Python Template
  description: When setting up a new Python project using the [NLeSC Copier Template](https://github.com/NLeSC/python-template), this file can be passed using `--data-file=copier_template_answers.yml` to already fill in some questions.
  filename: copier_template_answers
  variable name: template_yml
  raw: True
  content file: answers.yml
