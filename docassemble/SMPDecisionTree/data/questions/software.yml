metadata:
  title: |
    Software Management Plan
  short title: |
    SMP
  description: |
    Write a Software Managament Plan for your project
  authors:
    - name: Ole Mussmann
      organization: The Netherlands eScience Center
    - name: Sander van Rijn
      organization: The Netherlands eScience Center
    - name: Thijs van Lankveld
      organization: The Netherlands eScience Center
  revision_date: 2025-03-25
  tags:
    - management_plan
    - software
---
features:
  navigation: True
  progress bar: False
---
mandatory: True
code: |
  smp_decision_tree_version = "0.0.7"
  community = None
  reuse = None
  multi_user = None
  public = None
  smp_version = "0.1.0"
  release_date = today()
---
objects:
  - authors: |
      DAEmailRecipientList.using(
        there_are_any=True,
        there_is_another=False)
---
table: authors.table
rows: authors
columns:
  - Name: |
      row_item.name
  - E-mail: |
      row_item.address
edit:
  - name
  - address
allow reordering: True
---
initial: True
code: |

  # TODO Right now we have to duplicate the questionnaire flow logic here. Can we generate this instead?

  # When setting switch question variables, we want to recalculate the items in the navigation bar.
  # This code sets a dummy `navigation_recalculated` variable.
  # By having the switch question variables depend on (`depends on`) this variable here, we force `navigation_recalculated` to be re-evaluated and thus re-run this code.
  # TODO This is very clunky. If there's an easier way, feel free to improve this.

  scope_sections = {'section_scope': 'Scope', 'subsections': [{'section_access': 'Access'}, {'section_reuse': 'Reuse'}]}

  if not reuse is False:
    scope_sections['subsections'].append({'section_multi_user': 'Users'})
  else:
    multi_user = False

  if not multi_user is False:
    scope_sections['subsections'].append({'section_community': 'Community'})
  else:
    community = False

  software_management_sections = {'section_smp': 'Software Management', 'subsections': [{'section_authors': 'Authors'}, {'section_ownership': 'Ownership'}, {'section_context': 'Context'}]}

  if not public is False:
    software_management_sections['subsections'].append({'section_citation': 'Citation'})

  software_management_sections['subsections'].append({'section_versioning': 'Versioning'})

  if not public is False:
    software_management_sections['subsections'].append({'section_license': 'License'})

  if not (public is False) or not (reuse is False) or not (multi_user is False):
    software_management_sections['subsections'].append({'section_documentation': 'Documentation'})

  if not multi_user is False:
    software_management_sections['subsections'].append({'section_maintenance': 'Maintenance'})

  if not community is False:
    software_management_sections['subsections'].append({'section_sustainability': 'Sustainability'})
    software_management_sections['subsections'].append({'section_support': 'Support'})

  if not (reuse is False) or not (multi_user is False):
    software_management_sections['subsections'].append({'section_quality': 'Quality'})

  if not reuse is False:
    software_management_sections['subsections'].append({'section_packaging': 'Packaging'})

  software_management_sections['subsections'].append({'section_risks': 'Risks'})
  software_management_sections['subsections'].append({'section_dmp': 'DMP'})

  the_sections =  [{'section_introduction': 'Introduction'}, {'section_name_purpose': 'Name & Purpose'}] + [scope_sections, software_management_sections]
  nav.set_sections(the_sections)

  navigation_recalculated = True
---
sections:
  - section_introduction: Introduction
  - section_name_purpose: Name & Purpose
#  - Scope:
#    - section_access: Access
#    - section_reuse: Reuse
#    - section_multi_user: Users
#    - section_community: Community
#  - Software Management:
#    - section_authors: Authors
#    - section_ownership: Ownership
#    - section_context: Context
#    - section_citation: Citation
#    - section_versioning: Versioning
#    - section_license: License
#    - section_documentation: Documentation
#    - section_maintenance: Maintenance
#    - section_sustainability: Sustainability
#    - section_support: Support
#    - section_quality: Quality
#    - section_packaging: Packaging
#    - section_risks: Risks
#    - section_dmp: DMP
---
### Start questionnaire
include:
  - introduction.yml
  - name_purpose.yml
---
### Start switch questions
include:
  - access.yml
  - reuse.yml
  - community.yml
---
### Start content questions
include:
  - attribution.yml
  - versioning.yml
  - license.yml
  - documentation.yml
  - sustainability.yml
  - risks.yml
  - dmp.yml
---
mandatory: True
question: |
  Software Management Plan
attachment code: |
  [user_smp, machine_smp, template_yml]
---
attachment:
  name: Human Readable Software Management Plan for `${ software_name }`
  filename: Software_Management_Plan-${ space_to_underscore(software_name) }-${ release_date.strftime('%y_%m_%d') }
  docx template file: SMP_decision_tree_template_4.docx
  valid formats:
  #  - md
    - docx
  description: For your own administration
  variable name: user_smp
---
### Save all user answers in a dictionary
### The text will be saved in a variable called `user_vars_string`
code: |
  import copy
  import json

  user_vars = copy.deepcopy(all_variables())
  del user_vars["url_args"]
  del user_vars["session_local"]
  del user_vars["user_local"]
  del user_vars["device_local"]

  user_vars_string = json.dumps(user_vars, sort_keys=True, indent=4)
---
attachment:
  name: Machine Readable SMP for `${ software_name }`
  filename: Machine_Readable_SMP_${ space_to_underscore(software_name) }
  valid formats:
    - md
  description: For automated analysis
  variable name: machine_smp
  content: ${ user_vars_string }
---
attachment:
  name: Input file for the NLeSC Python Template
  description: When setting up a new Python project using the [NLeSC Copier Template](https://github.com/NLeSC/python-template), this file can be passed using `--data-file=copier_template_answers.yml` to already fill in some questions.
  filename: copier_template_answers
  variable name: template_yml
  raw: True
  content file: answers.yml
