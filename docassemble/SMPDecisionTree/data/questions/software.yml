metadata:
  title: |
    Software Management Plan
  short title: |
    SMP
  description: |
    Write a Software Managament Plan for your project
  authors:
    - name: Ole Mussmann
      organization: The Netherlands eScience Center
    - name: Sander van Rijn
      organization: The Netherlands eScience Center
  revision_date: 2024-03-24
  tags:
    - management_plan
    - software
---
features:
  progress bar: False
---
mandatory: True
code: |
  community = False
  reuse = False
  smp_version = "0.1.0"
---
objects:
  - authors: |
      DAEmailRecipientList.using(
        there_are_any=True,
        there_is_another=False)
---
table: authors.table
rows: authors
columns:
  - Name: |
      row_item.name
  - E-mail: |
      row_item.address
edit:
  - name
  - address
allow reordering: True
---
### Start questionnaire
mandatory: True
question: |
  Hi!
subquestion: |
  Welcome to the Software Management Plan ({SMP}) Decision Tree! In this tool, we will ask your some questions about your research software. Based on your answers, we will suggest which best practices are most relevant for you to consider. For each best practice this tool will provide some relevant resources and examples on how to implement them.
  
  When completed, you can download an overview of your answers as your SMP to serve as reference for yourself and as an overview for any technical support staff you may consult with later.
terms:
  SMP: |
    SMP: Software Management Plan; terms that deserve some context will be explained is these pop-ups.
help: |
  Nice, you discovered the help button. ü•≥ Questions that benefit from some context will offer a Help ‚≠ê button that explain the question in more detail or just give some background information  for you to learn from.
  
  You can go back to the questionnaire now up here. üëÜ
buttons:
  - Let's do this!: continue
---
mandatory: True
question: |
  Software Name
subquestion: |
  What is the name of your software or framework?
fields:
  - Name: software_name
    #default: my_software
    hint: my_software
---
### Start switch questions
mandatory: True
question: |
  Users, Developers, Creators
subquestion: |
  Do you expect/foresee `${ software_name }` being used by others, or integrated or modified by other developers, now or in the future?

  With this question, you answer if you expect people not directly or indirectly involved in the original development of the software to make use of it. People, in other words, that need to be taught how to deploy and use the software without being able to readily communicate with the original developer. If so, you will need to provide proper user/developer documentation, as well as follow coding best practices to facilitate deployment and use.

  <details>
  <summary>Decision Help</summary>
  <br>
  <h5>Example projects that would answer ‚Äúyes‚Äù here</h5>
    
  <ul>
    <li>A software package that you co-develop with collaborators and plan to make available to your research field.</li>
    <li>Tools for extracting, transforming and visualizing visuals of architectural design from PDF files: <a href="https://visarchpy.readthedocs.io">VisArchPy</a></li>
    <li>A web application that researchers use to create questionnaires to collect data from citizens involved in participatory urban planning.</li>
   </ul>

  <h5>Example projects that would answer ‚Äúno‚Äù here</h5>

  <ul>
    <li>Single-use script for a power-line data analysis for one paper.</li>
    <li>A custom BASH application for organizing and backing up millions of files containing results of a weather model running in an in-house computer cluster.</li>
  </ul>
  </details>
  <br>
  
yesno: multi_user

---
mandatory: not multi_user
question: |
  Reuse/Reproduce
subquestion: |
  Do you expect `${ software_name }` to be used for more than just its initial purpose, or used by external users?

  With this question, you answer if your software can be reused at a later stage or on a different project. If so, documentation needs to be provided in order to facilitate reuse.

  This question also encompasses whether the software (or suite of scripts/notebooks/data) is intended to be entirely reproducible. This is particularly relevant when the software and its outputs are integral to a peer-reviewed publication. In such instances, we recommend adding a data management plan to describe the underlying input and output data, in collaboration with your local Data Competence Center (DCC) or Publisher.
  
  <details>
    <summary>Decision Help</summary>
    <br>
    <h5>Example projects that would answer ‚Äúyes‚Äù here</h5>
     
    <ul>
      <li>Scripts or software that will be reused internally in your collaboration.</li>
      <li>Software that provides a certain type of standard/common analysis given a certain type of input data (i.e. emission line measurements).</li>
    </ul>

    <h5>Example projects that would answer ‚Äúno‚Äù here</h5>
    <ul>
      <li>One-off code linked to a specific instrument, data, and/or publication.</li>
      <li>A custom BASH application for creating a catalog of your data during your research.</li>
    </ul>
  </details>
  <br>
yesno: reuse
---
mandatory: True
question: |
  Public
subquestion: |
  Do you plan to make `${ software_name }` publicly available?
  
  With this question, you answer if you plan on making your software available on a searchable and accessible platform where others can find it. If so, you will have to also think about what conditions to make `${ software_name }` available under, e.g. its license.

  If you do not plan to make it publicly available, please provide your reasons.

fields:
  - "We will make `${ software_name }` publicly available": public
    datatype: yesnoradio
  - Explanation: public_explanation
    show if:
      variable: public
      is: False
    hint: Please explain why you will not publish your code
    input type: area
---
mandatory: multi_user
question: |
  Community
subquestion: |
  Does `${ software_name }` have, or do you plan to build a community around it?
  With this question, you answer if you expect a community to form around your software. With community we mean that other people from outside your direct collaborators or contacts are using or working on the software (semi-)autonomously. If so, you will need to plan for the software‚Äôs long-term sustainability and identify potential risks to its proper maintenance.
  
  <details>
  <summary>Decision Help</summary>
  <h5>Example projects that would answer ‚Äúyes‚Äù here</h5>
  
  <ul>
    <li>A jupyter notebook extension that enables researchers across disciplines to prepare, upload and download datasets from Zenodo, and other research data repositories: <a href="https://fairly.readthedocs.io">fairly.readthedocs.io</a></li>
  </ul>
  <h5>Example projects that would answer ‚Äúno‚Äù here</h5>
  <ul>
    <li>A software package that you co-develop with collaborators and plan to make available to your research field, but that does not call for further expansion.</li>
    </ul>
  </details>
  <br>

yesno: community
---
### Start content questions
mandatory: False
question: |
  Software Management Plan Version
subquestion: |
  What is the version of this Software Management Plan? [Semantic versioning](https://semver.org) is recommended to indicate the severity of changes.

  Examples: `0.0.1` or `7.5.3`

  Schema: `MAJOR`.`MINOR`.`PATCH`

  - `MAJOR` Large changes
  - `MINOR` Content additions
  - `PATCH` Minor changes, typos

  Note: A leading zero indicates a pre-release version.

fields:
  - Version: smp_version
    default: 0.1.0
---
mandatory: True
question: Software Management Plan Release Date
subquestion: |
  What is the release date of the Software Management Plan?
fields:
  - Release Date: release_date
    datatype: date
    default: ${ today() }
---
mandatory: True
question: |
  Review Authors
subquestion: |
  There
  %if authors.number()==1:
  is
  %else:
  are
  %endif
  ${ authors.number_as_word() } ${ authors.as_noun() }. Feel free to add more or arrange their order.

  Note: The first person will be used as primary contact.
  ${ authors.table }
  ${ authors.add_action() }
continue button field: authors_ok
---
question: |
  Authors
subquestion: |
  Who is the ${ ordinal(i) } author of this Software Management Plan?
fields:
  - Name: authors[i].name
    #default: Alice Munroe
    hint: Jane Doe
  - E-mail: authors[i].address
    #default: alice@example.com
    hint: jane_doe@example.com
    datatype: email
---
#question: |
#  Additional Authors
#subquestion: |
#  Would you like to add another author?
#yesno: authors.there_is_another
#---
---
mandatory: True
question: |
  Ownership
subquestion: |
  Who has the Intellectual Property (IP) of `${ software_name }`? You? Your university or department?

  Open-source software still is the intellectual property of someone, even if other people are permitted to use it according to the license terms.
fields:
  - Ownership: ownership
    #default: |
    #  long description
    #  multiple lines
    hint: University of Springfield, Department of Nuclear Physics
    input type: area
---
mandatory: True
question: |
  Research Project Context
subquestion: |
  Is there a research project associated with `${ software_name }`? Is it part of a call or consortium? Please provide the context which the software is embedded in.
fields:
  - Research Project Context: research_project_context
    #default: |
    #  long description
    #  multiple lines
    hint: This software is used in the MultiRay (see https://multiray.example.com) project, which is part of the CaptureTheSky call (see https://CTS.example.com).
    input type: area
    rows: 10
---
mandatory: True
question: |
  Purpose
subquestion: |
  Please provide a brief description of `${ software_name }`, stating its purpose and intended user community, if any.

  Clearly state the purpose of the software. Provide general information such as: what problem does it solve, who is the intended audience, what are its advantages and limitations, etc. A clear explanation of the purpose of the software helps the developer focus on its specific needs.

  Some aspects to be considered:

  - What is the purpose of the software?
  - What is the software‚Äôs intended user community?
  - Why are you developing this and not reusing existing software?
fields:
  - Software Purpose: purpose
    #default: |
    #  long description
    #  multiple lines
    hint: This BASH script proves the Hauptvermutung conjecture and generates some visual examples. It is intended to be used by the general math community. We are developing this software because no prior software like this exists since no one else proved the Hauptvermutung.
    input type: area
    rows: 10
---
mandatory: True
question: |
  Version Control
subquestion: |
  How will you manage versioning of `${ software_name }`? Which version control system will you use to manage your source code? What {versioning scheme} will you apply?

  Adequate versioning of research software facilitates management of research software, allowing for the identification of specific versions of the software.

terms:
  versioning scheme: |
     Typical versioning schemes are [semver](https://semver.org/) or [calver](https://calver.org/). It is usually discouraged to use a non-standard one or invent your own.

fields:
  - Version Control: version_control
    #default: |
    #  very version, much control
    hint: |
      git, using SemVer
    input type: area
    rows: 10
---
mandatory: public or reuse or multi_user
question: |
  Repository
subquestion: |
  Should `${ software_name }` be publicly available? The most important consideration is that potential users of the software are able to get a copy they can use. This is often a public or self-hosted repository like GitHub or GitLab.

  Please provide links to the software if this is already the case. This should be a repository with globally unique, persistent, and resolvable identifiers to each release.

  > ‚ö†Ô∏è If your repository grows so large that you work predominantly with shallow clones, the repository might be the only complete version of your code. In this case, consider backing up your repository together with your data.


fields:
  - Repository: repository
    #default: github/gitlab
    hint: The software will be available at https://uni_gotham.gitlab.com/RowHammer
    input type: area
    rows: 10
---
mandatory: public
question: |
  Licensing and Compatibility
subquestion: |
  What type of license will `${ software_name }` have? Ask your PI, research group, department, or legal department (in that order) for what is recommended for your situation. This will depend on what is specified by your research project, what is common in your field and what your institute allows.

  If you want to choose one yourself, you can use [choosealicense.com](https://choosealicense.com/) or [tldrlegal.com](https://www.tldrlegal.com/) as inspiration.

  If you don't choose one of the recommended licenses, please choose "Other" and explain your choice in the "Explanation" field.

help: |
  > ‚ö†Ô∏è
  > We are not lawyers. This is not legal advice. Please consult your legal department instead.
  > ‚ö†Ô∏è 

  For more defailed information, please refer to [The Turing Way chapter on Licensing](https://book.the-turing-way.org/reproducible-research/licensing.html?highlight=license)

fields:
  - License: software_license
    input type: combobox
    choices:
    - 'Apache-2.0 (Apache License 2.0)': 'Apache-2.0 (Apache License 2.0)'
    - 'BSD-3-Clause (BSD 3-Clause "New" or "Revised" License)': 'BSD-3-Clause (BSD 3-Clause "New" or "Revised" License)'
    - 'GPL-3.0-or-later (GNU General Public License v3.0 or later)': 'GPL-3.0-or-later (GNU General Public License v3.0 or later)'
    - 'MIT (MIT License)': 'MIT (MIT License)'
    - 'MPL-2.0 (Mozilla Public License 2.0)': 'MPL-2.0 (Mozilla Public License 2.0)'
    - 'Other': 'Other'
  - Explanation: license_explanation
    show if:
      variable: software_license
      is: Other
    hint: Please write which alternative license you will use
    input type: area
---
mandatory: public
question: |
  Citation
subquestion: |
  How will users of `${ software_name }` be able to cite your software? Please provide a link to your software citation file {CFF} and/or Digital Object Identifier {DOI} if available.
terms:
  CFF: |
    `CITATION.cff` files are plain text files with human- and machine-readable citation information for software (and datasets). Code developers can include them in their repositories to let others know how to correctly cite their software. [Details](https://citation-file-format.github.io/)
  DOI: |
    Designed to be used by humans as well as machines, DOIs identify objects persistently. They allow things to be uniquely identified and accessed reliably. [Details](https://www.doi.org/the-identifier/what-is-a-doi/)
fields:
  - Citation: citation
    #default: cite me!
    hint: "CFF file in the repository (link: ...), DOI on Zenodo (link: ...)"
    input type: area
    rows: 10
---
mandatory: public or reuse or multi_user
question: |
  User Documentation
subquestion: |
  How will `${ software_name }` be documented for users?

  Please provide a link to the documentation if available. How will you document your software‚Äôs contribution guidelines and governance structure? If you have any (additional) plans on how your software will be documented (e.g. creating tutorials, incorporating it in teaching, etc.) please specify.

fields:
  - User Documentation: user_documentation
    #default: very user doc
    hint: The documentation is part of the repository and will be generated with each release. An automated process publishes each version at https://sky-scanner.readthedocs.com
    input type: area
    rows: 10
---
mandatory: reuse or multi_user
question: |
  Developer Documentation
subquestion: |
  How will `${ software_name }` be documented for future developers?

  Please explain how the software can be modified (docstrings, in-line comments, etc.), tested, and contributed to (governance, code of conduct, contributing guidelines, etc.).

fields:
  - Developer Documentation: developer_documentation
    #default: very dev doc
    hint: The deployment documentation is part of the repository. It is a file called `README.dev.md`.
    input type: area
    rows: 10
---
mandatory: public or reuse or multi_user
question: |
  Deployment Documentation
subquestion: |
  How will the installation requirements, deployment- and testing instructions of `${ software_name }` be documented?

  Please provide a link to the installation documentation if available. This documentation should include a complete and unambiguous description of dependencies to other software, datasets, and hardware.

fields:
  - Deployment Documentation: deployment_documentation
    #default: very deploy doc
    hint: The developer documentation is a living document which is versioned with the software. It can be found at https://docs.google.com/heartbleed_deploy_doc
    input type: area
    rows: 10
---
mandatory: reuse or multi_user
question: |
  Testing
subquestion: |
  How will your software be tested? Please provide a link to automated testing results, if available.
  
  Incorporate tests to ensure your software continues to work as intended. Different types of testing (unit, functional, integration, linting, typing, regression, etc.) could be used. Tests in turn should also be documented. Coverage tools should also be used to assess the extent of the tested code.

fields:
  - Testing: testing
    #default: manual testing
    hint: Testing is only manual for now, but we plan to use automated testing as part of a CI/CD (Continuous Integration/Continuous Deployment) pipeline.
    input type: area
    rows: 10
---
mandatory: reuse or multi_user
question: |
  Quality
subquestion: |
  Make sure your software adheres to relevant code quality standards (styling, modularity, etc.) and uses tools for collaborative development to measure code quality. Do you use a {software quality checklist}? If yes, which one?

terms:
  software quality checklist: |
    A checklist outlining useful software best practices. If your institution does not have their own, you can find one at [bestpractices.dev](https://www.bestpractices.dev).

fields:
  - Quality: quality
    #default: I only write perfect code.
    hint: Our software currently covers 85% of the checklist at https://www.bestpractices.dev. We aim for 95% at the end of the project.
    input type: area
    rows: 10
---
mandatory: reuse
question: |
  Packaging
subquestion: |
  How will `${ software_name }` be packaged and distributed? Please provide a link to available packaging information (e.g. entry in a packaging registry, if available).

  Use appropriate package managers to allow users to install/deploy your software with ease. Examples include PyPI, CRAN, NPM, Maven, Crates, conda, etc.

fields:
  - Packaging: packaging
    #default: I will package it in a cardboard box.
    hint: "XZ Utils will be packaged on Pypi (link: ...) and conda (link: ...)"
    input type: area
    rows: 10
---
mandatory: multi_user
question: |
  Maintenance
subquestion: |
  Make sure there are arrangements in place for the maintenance and reuse of `${ software_name }`. Whenever suitable, develop a retirement strategy for your software. Is there an organization or company that can take over the development?

  How do you plan to procure long term maintenance of your software? 

fields:
  - Maintenance: maintenance
    #default: No maintenance, my software is perfect.
    hint: The LogoFAIL project runs for four years after which either Microsoft will take it over or the software will be retired. In any case, the vulnerability will surely be patched by then.
    input type: area
    rows: 10
---
mandatory: community
question: |
  Sustainability
subquestion: |
  What measures will be taken during the project to ensure the long-term sustainability of `${ software_name }`? (less than 300 words)

  Some examples include:

  - A researcher or RSE from a research institute is allocated to the project to co-develop the software during the project and help maintain it afterwards.
  - A community will co-develop the software and help maintain it afterwards.
  - Organizing workshops and hands-on user training to create or extend a community around the software.
  - The software will be developed as part of an overarching software suite used in other (research) projects.
  - A commercial partner interested in exploiting the software is included as a co-applicant on the basis of a concrete in-cash or in-kind investment.  
  - Is it necessary to consider measures to extend the longevity of the software?  For example, obtain funding for further development, adopt use of the software into courses, or increase outreach through mainstream media. 
  - Do you have the resources to procure storage and computer infrastructure required for maintaining the software. 

fields:
  - Sustainability: sustainability
    #default: It's so good, it will live forever.
    hint: During the project we will build a community around Shellshock. After a second round of funding, a non-profit will be set up to govern the project for the next 20 years.
    input type: area
    rows: 10
---
mandatory: community
question: |
  Support
subquestion: |
  Plan resources for support-related activities such as training, hiring research software engineers, infrastructure, hardware, etc, and regarding the level of service provided by `${ software_name }`. Do you plan to continue support after active development of the software?

  What level of support will be provided for your users and how will this support be organised?

fields:
  - Support: support
    #default: Personal support for my friends.
    hint: DeadBolt will have a self-hosted helpdesk ticket system (osTicket) and a telephone hotline for our ransomware victims. We intend to answer requests within 24 hours.
    input type: area
    rows: 10
---
mandatory: true
question: |
  Risk Analysis
subquestion: |
  Consider other factors that could have an impact on `${ software_name }`, or could be caused by `${ software_name }`your software. For example compliance with privacy policies, security considerations, reliability requirements, portability / vendor lock-in, etc.

  Describe the main external factors that should be considered by developers and users of the Software. These could include data privacy, information security, etc.

  Are you using ML (machine learning) or AI (artificial intelligence) in your project? This might have implications on your output. Decisions based on machine learning models might carry over biases of your input data. Output based on LLMs (large language models) often have unknown IP (intellectual property) or ownership. When in doubt, ask your legal department for assistance.

fields:
  - Risk Analysis: risk_analysis
    #default: My software is high risk, high reward.
    hint: Right now our university department discourages the use of our ChatGPT software to filter new applicants. We are actively working with management to change that.
    input type: area
    rows: 10
---
mandatory: true
question: |
  Data Management Plan
subquestion: |
  Does `${ software_name }` use or produce any data? Consider writing a DMP (Data Management Plan) next to this Software Management Plan. Please provide a brief explanation and include a link to the DMP, if applicable.

fields:
  - Data Management Plan: data_management_plan
    #default: Here's my DMP
    hint: "We are using web-scraped Facebook data and output a list of potential burglary victims in The Netherlands. Our DMP can be found here: https://dmp.example.com"
    input type: area
    rows: 10
---
mandatory: True
question: |
  Software Management Plan
attachment code: |
  [user_smp, machine_smp]
---
attachment:
  name: Human Readable Software Management Plan for `${ software_name }`
  filename: Software_Management_Plan_${ space_to_underscore(software_name) }
  docx template file: SMP_decision_tree_template_3.docx
  valid formats:
  #  - md
    - docx
  description: For your own administration
  variable name: user_smp
#  content: |
#    Software Management Plan
#    ========================
#
#    Software Name: `${ software_name }`
#
#    Software Management Plan Version: _${ smp_version }_
#
#    Authors: ${ authors }
#
#    Date: ${ release_date }
#
#    ## Purpose
#    A brief description of `${ software_name }`, stating its purpose and intended user community, if any.
#
#    > <i>${ purpose }</i>
#
#    ## Version Control
#    How are different versions of `${ software_name }` managed?
#
#    > _${ version_control }_
#
#    % if public or reuse:
#      ## Repository
#
#      Is `${ software_name }` intended to be published? If yes, where?
#
#      > _${ repository }_
#    % endif
#
#    % if public:
#      ## Software Licencing and Compatibility
#      What type of license will `${ software_name }` have?
#
#      > _${ software_license }_
#    % endif
#
#    % if public:
#      ## Citation
#      How will users of `${ software_name }` be able to cite the software?
#
#      > _${ citation }_
#    % endif
#
#    % if public or reuse:
#      ## User Documentation
#      How will `${ software_name }` be documented for users?
#
#      > _${ user_documentation }_
#    % endif
#
#    % if reuse:
#      ## User Documentation
#      How will `${ software_name }` be documented for future developers?
#
#      > _${ developer_documentation }_
#    % endif
#
#    % if reuse:
#      ## Deployment Documentation
#      How will the installation requirements, deployment- and testing instructions of your software be documented?
#
#      > _${ deployment_documentation }_
#    % endif
#
#    % if reuse:
#      ## Testing
#      How will your software be tested?
#
#      > _${ testing }_
#    % endif
#
#    % if reuse:
#      ## Quality
#      How will `${ software_name }`'s quality be ensured? Is there a software quality checklist?
#
#      > _${ quality }_
#    % endif
#
#    % if reuse:
#      ## Packaging
#      How will `${ software_name }` be packaged and distributed?
#
#      > _${ packaging }_
#    % endif
#
#    % if multi_user:
#      ## Maintenance
#      How do you plan to procure long term maintenance of `${ software_name }`?
#
#      > _${ maintenance }_
#    % endif
#
#    % if community:
#      ## Sustainability
#      What measures will be taken to ensure long-term sustainability of `${ software_name }`?
#
#      > _${ sustainability }_
#    % endif
#
#    % if community:
#      ## Support
#      What level of support will be provided for users of `${ software_name }` and how will this be organized?
#
#      > _${ support }_
#    % endif
#
#    % if community:
#      ## Risk Analysis
#      What are the main external factors that should be considered by developers and users of `${ software_name }`?
#
#      > _${ risk_analysis }_
#    % endif
#---
#attachment:
#  name: Machine-actionable Software Management Plan for `${ software_name }`
#  filename: Machine-actionable_SMP_${ space_to_underscore(software_name) }
#  description: SMP for machines
#  variable name: machine_smp
#  valid formats:
#    - md
#  content: |
#    software_name: ${ software_name }
#    software_management_plan_version: ${ smp_version }
#    smp_authors: ${ authors }
#    smp_release_date: ${ release_date }
#    software_purpose: ${ purpose }
#    etc.
---
### Save all user answers in a dictionary
### The text will be saved in a variable called `user_vars_string`
code: |
  import copy
  import json
  
  user_vars = copy.deepcopy(all_variables())
  del user_vars["url_args"]
  del user_vars["session_local"]
  del user_vars["user_local"]
  del user_vars["device_local"]
  
  user_vars_string = json.dumps(user_vars, sort_keys=True, indent=4)
---
attachment:
  name: Machine Readable SMP for `${ software_name }`
  filename: Machine Readable SMP_${ space_to_underscore(software_name) }
  valid formats:
    - md
  description: For automated analysis
  variable name: machine_smp
  content: ${ user_vars_string }